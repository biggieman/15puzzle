{"version":3,"sources":["store/actions.js","helpers/gridFinder.js","helpers/gridMove.js","helpers/gridGenerator.js","store/reducers.js","components/App/App.js","index.js","store/localStorage.js"],"names":["doMove","from","type","payload","doNewGame","doReset","coordsCompare","one","two","findByCoord","grid","coord","position","forEach","cols","row","item","col","getMovedGrid","fromCoord","toCoord","gridNew","JSON","parse","stringify","_unused","fromPosition","toPosition","_fromPosition","Object","slicedToArray","rowFrom","colFrom","_toPosition","rowTo","colTo","tmp","slice","gridGenerator","state","emptyCoord","getRandomInt","arguments","length","undefined","rMax","cMax","plain","Array","fill","map","_","i","isEmptyExists","r","c","value","splice","generateGrid","min","max","Math","floor","random","initialState","started","moves","startState","objectSpread","generateGridState","App","_this$props","this","props","react_default","a","createElement","className","onClick","key","style","top","left","React","Component","connect","dispatch","bindActionCreators","persistedState","serializedState","localStorage","getItem","e","loadState","store","createStore","action","res","filter","coords","isCoordPossibleToMove","getPossibleCoordsToMove","isEmptyCoordPossibleToMove","subscribe","setItem","saveState","getState","ReactDOM","render","es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.f94aa878.chunk.js","sourcesContent":["export const ACTION_MOVE = 'ACTION_MOVE';\nexport const ACTION_NEW_GAME = 'ACTION_NEW_GAME';\nexport const ACTION_RESET = 'ACTION_RESET';\n\nexport const doMove = (from) => {\n    return {\n        type: ACTION_MOVE,\n        payload: from\n    };\n};\n\nexport const doNewGame = () => {\n    return {\n        type: ACTION_NEW_GAME,\n        payload: null\n    };\n};\n\nexport const doReset = () => {\n    return {\n        type: ACTION_RESET,\n        payload: null\n    };\n};\n","export const coordsCompare = (one, two) => {\n    return one[0] === two[0]\n        && one[1] === two[1];\n};\n\nexport const isCoordPossibleToMove = (coord, rMax = 4, cMax = 4) => {\n    return coord[0] >= 0 && coord[0] < rMax\n        && coord[1] >= 0 && coord[1] < cMax;\n}\n\nexport const getPossibleCoordsToMove = (fromCoord) => {\n    let row = fromCoord[0];\n    let col = fromCoord[1];\n\n    return [\n        [row - 1, col],\n        [row + 1, col],\n        [row, col - 1],\n        [row, col + 1]\n    ].filter((coords) => isCoordPossibleToMove(coords));\n};\n\nexport const isEmptyCoordPossibleToMove = (fromCoord, emptyCoord) => {\n    let res = getPossibleCoordsToMove(fromCoord).filter(coord => coordsCompare(coord, emptyCoord));\n\n    return res && res[0] ? true : false;\n};\n\nexport const findByCoord = (grid, coord) => {\n    let position = null;\n\n    grid.forEach((cols, row) => {\n        cols.forEach((item, col) => {\n            if (coordsCompare(coord, item.coord)) {\n                position = [row, col];\n            }\n        });\n    });\n\n    return position;\n};\n","import { findByCoord } from './gridFinder';\n\nexport const getMovedGrid = (grid, fromCoord, toCoord) => {\n    let gridNew;\n\n    try {\n        // clone grid\n        gridNew = JSON.parse(JSON.stringify(grid));\n    } catch {\n        return grid;\n    }\n\n    let fromPosition = findByCoord(gridNew, fromCoord);\n    let toPosition = findByCoord(gridNew, toCoord);\n\n    // swap\n    if (fromPosition && toPosition) {\n        let [rowFrom, colFrom] = fromPosition;\n        let [rowTo, colTo] = toPosition;\n\n        let tmp = gridNew[rowFrom][colFrom].coord.slice(0);\n        gridNew[rowFrom][colFrom].coord = gridNew[rowTo][colTo].coord.slice(0);\n        gridNew[rowTo][colTo].coord = tmp;\n    }\n\n    return gridNew;\n};\n","import { coordsCompare } from './gridFinder';\n\nexport const generateEmptyCoords = () => {\n    return [getRandomInt(0, 4), getRandomInt(0, 4)];\n};\n\nexport const generateGrid = (emptyCoord = [0, 0], rMax = 4, cMax = 4) => {\n    let plain = (new Array(15)).fill(0).map((_, i) => i + 1);\n    let grid = [];\n\n    let isEmptyExists = false;\n\n    for (let r = 0; r < rMax; r++) {\n        grid[r] = [];\n\n        for (let c = 0; c < cMax; c++) {\n            grid[r][c] = {\n                coord: [r, c],\n                value: 0\n            };\n\n            if (!isEmptyExists && coordsCompare([r, c], emptyCoord)) {\n                isEmptyExists = true;\n\n                continue;\n            }\n\n            // populating by random value\n            grid[r][c].value = plain.splice(getRandomInt(0, plain.length), 1)[0];\n        }\n    }\n\n    return grid;\n};\n\nexport default () => {\n    let state = {};\n\n    state.emptyCoord = generateEmptyCoords();\n    state.grid = generateGrid(state.emptyCoord);\n\n    return state;\n};\n\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n","import { ACTION_MOVE, ACTION_NEW_GAME, ACTION_RESET} from './actions';\nimport { isEmptyCoordPossibleToMove } from './../helpers/gridFinder';\nimport { getMovedGrid } from './../helpers/gridMove';\nimport generateGridState from './../helpers/gridGenerator';\n\nconst initialState = {\n    started: false,\n    moves: 0\n};\n\nlet startState = {\n    ...initialState,\n    ...generateGridState()\n};\n\nexport const rootReducer = (state = startState, action) => {\n    switch (action.type) {\n        case ACTION_MOVE:\n            let fromCoord = action.payload;\n            let toCoord = state.emptyCoord;\n\n            if (isEmptyCoordPossibleToMove(fromCoord, toCoord)) {\n                return {\n                    ...state,\n                    started: true,\n                    grid: getMovedGrid(state.grid, fromCoord, toCoord),\n                    emptyCoord: fromCoord,\n                    moves: state.moves + 1\n                };\n            }\n\n            return {...state};\n\n        case ACTION_NEW_GAME:\n            startState = {\n                ...initialState,\n                started: false,\n                ...generateGridState()\n            };\n\n            return startState;\n        case ACTION_RESET:\n            return {...startState};\n        default:\n            return state;\n    }\n};\n","import React from 'react';\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { doMove, doNewGame, doReset } from './../../store/actions';\n\nimport './App.css';\n\nclass App extends React.Component {\n    render() {\n        const {grid, moves, doMove, doNewGame, doReset} = this.props;\n\n        const getStyle = (position) => {\n            return {\n                top: position[0] * 60 + 'px',\n                left: position[1] * 60 + 'px'\n            };\n        };\n\n        return (\n            <div className=\"app\">\n                <div>\n                <button onClick={() => {doNewGame()}}>New game</button> <button onClick={() => {doReset()}}>Reset</button>\n                </div>\n                Moves: {moves}\n                <div className=\"container\">\n                    <div className=\"grid\">\n                        {grid.map((cols, row) => {\n                            return cols.map((item, col) => {\n                                return (\n                                    <div\n                                        key={'item:' + row + ':'+ col}\n                                        className={'grid-item ' + (!item.value ? 'grid-item--empty' : '')}\n                                        style={getStyle(item.coord)}\n                                        onClick={() => {\n                                            item.value && doMove(item.coord);\n                                        }}\n                                        >\n                                        <span className=\"grid-item__inner\">{item.value || ''}</span>\n                                    </div>\n                                );\n                            });\n                        })}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst putStateToProps = (state) => {\n    return {\n        grid: state.grid,\n        moves: state.moves\n    };\n};\n\nconst putActionsToProps = (dispatch) => {\n    return {\n        doMove: bindActionCreators(doMove, dispatch),\n        doNewGame: bindActionCreators(doNewGame, dispatch),\n        doReset: bindActionCreators(doReset, dispatch)\n    };\n};\n\nexport default connect(putStateToProps, putActionsToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './store/reducers';\n\nimport App from './components/App/App';\nimport { loadState, saveState } from './store/localStorage';\n\nimport './index.css';\n\nconst persistedState = loadState();\nconst store = createStore(rootReducer, persistedState);\n\nstore.subscribe(() => {\n    saveState(store.getState());\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n)\n","const STORAGE_KEY = '15puzzle:state';\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem(STORAGE_KEY);\r\n        if (serializedState === null) {\r\n            return;\r\n        }\r\n\r\n        return JSON.parse(serializedState);\r\n    } catch (e) {\r\n        return;\r\n    }\r\n};\r\n\r\nexport const saveState = (state) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n\r\n        localStorage.setItem(STORAGE_KEY, serializedState);\r\n    } catch (e) {}\r\n};\r\n"],"sourceRoot":""}
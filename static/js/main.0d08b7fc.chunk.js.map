{"version":3,"sources":["store/actions.js","helpers/gridFinder.js","helpers/gridGenerator.js","store/reducers.js","components/App/App.js","index.js","store/localStorage.js","helpers/gridMove.js"],"names":["doMove","from","type","payload","doNewGame","doReset","coordsCompare","one","two","findIndexByCoord","grid","coord","findIndex","item","gridGenerator","rMax","arguments","length","undefined","cMax","state","min","max","plain","Array","fill","map","_","i","r","c","push","value","splice","Math","floor","random","generateGrid","emptyCoord","find","initialState","started","moves","startState","Object","objectSpread","generateGridState","App","_this$props","this","props","react_default","a","createElement","className","onClick","index","key","style","position","top","left","React","Component","connect","dispatch","bindActionCreators","persistedState","serializedState","localStorage","getItem","JSON","parse","e","loadState","store","createStore","action","fromCoord","toCoord","res","row","col","filter","coords","isCoordPossibleToMove","getPossibleCoordsToMove","isEmptyCoordPossibleToMove","gridNew","slice","assign","fromPosition","toPosition","tmp","getMovedGrid","subscribe","getState","stringify","setItem","saveState","removeItem","clearState","ReactDOM","render","es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.0d08b7fc.chunk.js","sourcesContent":["export const ACTION_MOVE = 'ACTION_MOVE';\nexport const ACTION_NEW_GAME = 'ACTION_NEW_GAME';\nexport const ACTION_RESET = 'ACTION_RESET';\n\nexport const doMove = (from) => {\n    return {\n        type: ACTION_MOVE,\n        payload: from\n    };\n};\n\nexport const doNewGame = () => {\n    return {\n        type: ACTION_NEW_GAME,\n        payload: null\n    };\n};\n\nexport const doReset = () => {\n    return {\n        type: ACTION_RESET,\n        payload: null\n    };\n};\n","export const coordsCompare = (one, two) => {\n    return one[0] === two[0]\n        && one[1] === two[1];\n};\n\nexport const isCoordPossibleToMove = (coord, rMax = 4, cMax = 4) => {\n    return coord[0] >= 0 && coord[0] < rMax\n        && coord[1] >= 0 && coord[1] < cMax;\n}\n\nexport const getPossibleCoordsToMove = (fromCoord) => {\n    let row = fromCoord[0];\n    let col = fromCoord[1];\n\n    return [\n        [row - 1, col],\n        [row + 1, col],\n        [row, col - 1],\n        [row, col + 1]\n    ].filter((coords) => isCoordPossibleToMove(coords));\n};\n\nexport const isEmptyCoordPossibleToMove = (fromCoord, emptyCoord) => {\n    let res = getPossibleCoordsToMove(fromCoord).filter(coord => coordsCompare(coord, emptyCoord));\n\n    return res && res[0] ? true : false;\n};\n\nexport const findIndexByCoord = (grid, coord) => {\n    return grid.findIndex(item => coordsCompare(item.coord, coord));\n};\n","export const generateGrid = (rMax = 4, cMax = 4) => {\n    let size = rMax * cMax;\n    let plain = (new Array(size)).fill(0).map((_, i) => i);\n\n    let grid = [];\n\n    for (let r = 0; r < rMax; r++) {\n        for (let c = 0; c < cMax; c++) {\n            grid.push({\n                coord: [r, c],\n                value: plain.splice(getRandomInt(0, plain.length), 1)[0]\n            });\n        }\n    }\n\n    return grid;\n};\n\nexport default (rMax = 4, cMax = 4) => {\n    let state = {};\n\n    state.grid = generateGrid(rMax, cMax);\n    state.emptyCoord = state.grid.find(item => !item.value).coord;\n\n    return state;\n};\n\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n","import { ACTION_MOVE, ACTION_NEW_GAME, ACTION_RESET} from './actions';\nimport { isEmptyCoordPossibleToMove } from './../helpers/gridFinder';\nimport { getMovedGrid } from './../helpers/gridMove';\nimport generateGridState from './../helpers/gridGenerator';\n\nconst initialState = {\n    started: false,\n    moves: 0\n};\n\nlet startState = {\n    ...initialState,\n    ...generateGridState()\n};\n\nexport const rootReducer = (state = startState, action) => {\n    switch (action.type) {\n        case ACTION_MOVE:\n            let fromCoord = action.payload;\n            let toCoord = state.emptyCoord;\n\n            let grid = isEmptyCoordPossibleToMove(fromCoord, toCoord) && getMovedGrid(state.grid, fromCoord, toCoord);\n\n            if (grid) {\n                return {\n                    ...state,\n                    started: true,\n                    emptyCoord: fromCoord,\n                    grid: grid,\n                    moves: state.moves + 1\n                };\n            }\n\n            return {...state};\n\n        case ACTION_NEW_GAME:\n            startState = {\n                ...initialState,\n                started: false,\n                ...generateGridState()\n            };\n\n            return startState;\n\n        case ACTION_RESET:\n            return {...startState};\n\n        default:\n            return state;\n    }\n};\n","import React from 'react';\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { doMove, doNewGame, doReset } from './../../store/actions';\n\nimport './App.css';\n\nclass App extends React.Component {\n    render() {\n        const {grid, moves, doMove, doNewGame, doReset} = this.props;\n\n        const getStyle = (position) => {\n            return {\n                top: position[0] * 60 + 'px',\n                left: position[1] * 60 + 'px'\n            };\n        };\n\n        return (\n            <div className=\"app\">\n                <div>\n                <button onClick={() => {doNewGame()}}>New game</button> <button onClick={() => {doReset()}}>Reset</button>\n                </div>\n                Moves: {moves}\n                <div className=\"container\">\n                    <div className=\"grid\">\n                        {grid.map((item, index) => {\n                            return (\n                                <div\n                                    key={'item:' + index}\n                                    className={'grid-item ' + (!item.value ? 'grid-item--empty' : '')}\n                                    style={getStyle(item.coord)}\n                                    onClick={() => {\n                                        item.value && doMove(item.coord);\n                                    }}\n                                    >\n                                    <span className=\"grid-item__inner\">{item.value || ''}</span>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        grid: state.grid,\n        moves: state.moves\n    };\n};\n\nconst mapActionsToProps = (dispatch) => {\n    return {\n        doMove: bindActionCreators(doMove, dispatch),\n        doNewGame: bindActionCreators(doNewGame, dispatch),\n        doReset: bindActionCreators(doReset, dispatch)\n    };\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './store/reducers';\n\nimport App from './components/App/App';\nimport { loadState, saveState, clearState } from './store/localStorage';\n\nimport './index.css';\n\nconst persistedState = loadState();\nconst store = createStore(rootReducer, persistedState);\n\nstore.subscribe(() => {\n    const state = store.getState();\n\n    if (state.started) {\n        saveState(state);\n    } else {\n        clearState();\n    }\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n)\n","const STORAGE_KEY = '15puzzle:state';\n\nexport const loadState = () => {\n    try {\n        const serializedState = localStorage.getItem(STORAGE_KEY);\n        if (serializedState === null) {\n            return;\n        }\n\n        return JSON.parse(serializedState);\n    } catch (e) {\n        return;\n    }\n};\n\nexport const saveState = (state) => {\n    try {\n        const serializedState = JSON.stringify(state);\n\n        localStorage.setItem(STORAGE_KEY, serializedState);\n    } catch (e) {}\n};\n\nexport const clearState = () => {\n    try {\n        localStorage.removeItem(STORAGE_KEY);\n    } catch (e) {}\n};\n","import { findIndexByCoord } from './gridFinder';\n\nexport const getMovedGrid = (grid, fromCoord, toCoord) => {\n    let gridNew = grid.slice(0).map(item => Object.assign({}, item));\n\n    let fromPosition = findIndexByCoord(gridNew, fromCoord);\n    let toPosition = findIndexByCoord(gridNew, toCoord);\n\n    if (fromPosition === -1 || toPosition === -1) {\n        return;\n    }\n\n    // swap coords\n    let tmp = gridNew[fromPosition].coord.slice(0);\n    gridNew[fromPosition].coord = gridNew[toPosition].coord.slice(0);\n    gridNew[toPosition].coord = tmp;\n\n    return gridNew;\n};\n"],"sourceRoot":""}